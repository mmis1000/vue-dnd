import{_ as e,p as a,q as n,a1 as t}from"./framework-9002dd78.js";const i={},l=t(`<h1 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h1><h2 id="utilities" tabindex="-1"><a class="header-anchor" href="#utilities" aria-hidden="true">#</a> Utilities</h2><h3 id="createtype-t-name-unnamed" tabindex="-1"><a class="header-anchor" href="#createtype-t-name-unnamed" aria-hidden="true">#</a> createType&lt;T, Name = &#39;Unnamed&#39;&gt;()</h3><p>Utility that can be used to create a type token.</p><ul><li><p>Type arguments</p><ul><li><code>T</code><ul><li>Description: Data type associated with this Type</li></ul></li><li><code>Name</code><ul><li>Description: Optional human readable description</li></ul></li></ul></li><li><p>Returns</p><ul><li><a href="#type-t-name-unnamed"><code>Type&lt;T, Name&gt;</code></a></li></ul></li></ul><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h2><h3 id="usehtmlprovider" tabindex="-1"><a class="header-anchor" href="#usehtmlprovider" aria-hidden="true">#</a> useHtmlProvider()</h3><p>hook that provides native dnd based dnd experience</p><ul><li>props <ul><li>works with native file upload</li></ul></li><li>cons <ul><li>does not work on touch devices</li></ul></li></ul><h3 id="usepointereventprovider" tabindex="-1"><a class="header-anchor" href="#usepointereventprovider" aria-hidden="true">#</a> usePointerEventProvider()</h3><p>hook that provides pointer event-based dnd experience</p><ul><li>props <ul><li>works on touch devices</li></ul></li><li>cons <ul><li>does not work with native file upload</li></ul></li></ul><h3 id="usedraggable" tabindex="-1"><a class="header-anchor" href="#usedraggable" aria-hidden="true">#</a> useDraggable</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useDraggable</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>
  type<span class="token operator">:</span> Type<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  propsItem<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span>
  state<span class="token operator">:</span> <span class="token punctuation">{</span>
    isDragging<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Arguments</p><ul><li>type <ul><li>Type: <a href="#type-t-name-unnamed"><code>Type&lt;T&gt;</code></a></li></ul></li><li>data <ul><li>Type: <code>T</code></li></ul></li><li>options <ul><li>Type: object</li><li>optional</li><li>properties <ul><li>ref <ul><li>Description: ref container to contain target dom element if you also need ref of it</li><li>Type: <code>Ref&lt;HtmlElement&gt;</code></li><li>optional</li></ul></li><li>preview: <ul><li>Type: <code>() =&gt; VNode&lt;any, any, any&gt;</code></li><li>optional</li></ul></li><li>onDragStart <ul><li>Type: <a href="#dnddraghandlerwithdata-t"><code>DndDragHandlerWithData&lt;T&gt;</code></a></li><li>optional</li></ul></li><li>startDirection <ul><li>Description: the available start direction of dragging, only works with <code>usePointerEventProvider</code></li><li>Type: <a href="#startdirection"><code>StartDirection | Ref&lt;StartDirection&gt;</code></a></li><li>optional</li></ul></li><li>disabled <ul><li>Description: disable this hook like it never applied</li><li>Type: <code>boolean</code> | <code>Ref&lt;boolean&gt;</code></li><li>optional</li></ul></li></ul></li></ul></li></ul></li><li><p>Return</p><ul><li>type: object</li><li>properties <ul><li>propsItem <ul><li>Description: item properties that need to be applied to the element</li><li>Type: <code>ComputedRef&lt;Record&lt;string, any&gt;&gt;</code></li></ul></li><li>state <ul><li>Description: state of the current drag target</li><li>Type: object</li><li>properties <ul><li>isDragging <ul><li>Description: is this item currently being dragged</li><li>Type: <code>ComputedRef&lt;boolean&gt;</code></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="usedroppable" tabindex="-1"><a class="header-anchor" href="#usedroppable" aria-hidden="true">#</a> useDroppable</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useDroppable</span> <span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  type<span class="token operator">:</span> Type<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  options
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
  propsItem<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  hoverState<span class="token operator">:</span> <span class="token punctuation">{</span>
    hover<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
    accepted<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
    dragging<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Arguments</p><ul><li>type <ul><li>Type: <a href="#type-t-name-unnamed"><code>Type&lt;T&gt;</code></a></li></ul></li><li>options <ul><li>Type: object</li><li>properties <ul><li>ref <ul><li>Description: ref container to contain target dom element if you also need ref of it</li><li>Type: <code>Ref&lt;HtmlElement&gt;</code></li><li>optional</li></ul></li><li>onDrop <ul><li>Type: <a href="#dnddraghandlerwithdata-t"><code>DndDragHandlerWithData&lt;T&gt;</code></a></li><li>optional</li></ul></li><li>onDragOver <ul><li>Type: <a href="#dnddraghandlerwithdata-t"><code>DndDragHandlerWithData&lt;T&gt;</code></a></li><li>optional</li></ul></li><li>onDragEnter <ul><li>Type: <a href="#dnddraghandlerwithdata-t"><code>DndDragHandlerWithData&lt;T&gt;</code></a></li><li>optional</li></ul></li><li>onDragLeave <ul><li>Type: <a href="#dnddraghandlerwithdata-t"><code>DndDragHandlerWithData&lt;T&gt;</code></a></li><li>optional</li></ul></li><li>disabled <ul><li>Description: disable this hook like it never applied</li><li>Type: <code>boolean</code> | <code>Ref&lt;boolean&gt;</code></li><li>optional</li></ul></li></ul></li></ul></li></ul></li><li><p>Return</p><ul><li>type: object</li><li>properties <ul><li>propsItem <ul><li>Description: item properties that need to be applied to the element</li><li>Type: <code>ComputedRef&lt;Record&lt;string, any&gt;&gt;</code></li></ul></li><li>state <ul><li>Current state of a dnd provider and this drop zone</li><li>Type: object</li><li>properties <ul><li>dragging <ul><li>Description: Is there any item being dragged</li><li>Type: boolean</li></ul></li><li>hover <ul><li>Description: Whether this drop zone is being hovered</li><li>Type: boolean</li></ul></li><li>accepted <ul><li>Description: Whether this drop zone wishes to accept the dragging item</li><li>Type: boolean</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="components" tabindex="-1"><a class="header-anchor" href="#components" aria-hidden="true">#</a> Components</h2><h3 id="draglayer" tabindex="-1"><a class="header-anchor" href="#draglayer" aria-hidden="true">#</a> DragLayer</h3><p>Container that the system used to render drag previews.</p><p>Must be put under a provider.</p><p>Preferably to be teleported to <code>&lt;body&gt;</code> to avoid overflow problems.</p><ul><li>Attributes <ul><li>None</li></ul></li></ul><h3 id="htmlprovider" tabindex="-1"><a class="header-anchor" href="#htmlprovider" aria-hidden="true">#</a> HtmlProvider</h3><p>The same as <a href="#usehtmlprovider">useHtmlProvider</a> except it is a component</p><ul><li>Attributes <ul><li>None</li></ul></li></ul><h3 id="pointereventprovider" tabindex="-1"><a class="header-anchor" href="#pointereventprovider" aria-hidden="true">#</a> PointerEventProvider</h3><p>The same as <a href="#usepointereventprovider">usePointerEventProvider</a> except it is a component</p><ul><li>Attributes <ul><li>None</li></ul></li></ul><h2 id="interfaces" tabindex="-1"><a class="header-anchor" href="#interfaces" aria-hidden="true">#</a> Interfaces</h2><h3 id="type-t-name-unnamed" tabindex="-1"><a class="header-anchor" href="#type-t-name-unnamed" aria-hidden="true">#</a> Type&lt;T, Name = &#39;Unnamed&#39;&gt;</h3><p>Magic type that represents a data type</p><p>Can only be created by <a href="#createtype-t-name-unnamed">createType&lt;T, Name = &#39;Unnamed&#39;&gt;()</a></p><ul><li>properties <ul><li><code>withFilter(fn: (value: T) =&gt; boolean) =&gt; Type&lt;T, Name = &#39;Unnamed&#39;&gt;</code><ul><li>create a new drop zone type with filter applied</li></ul></li></ul></li></ul><h3 id="nativefile" tabindex="-1"><a class="header-anchor" href="#nativefile" aria-hidden="true">#</a> NativeFile</h3><p>A special type constant that catches all native drop events</p><ul><li>properties <ul><li><code>withFilter(fn: (value: DragEvent) =&gt; boolean) =&gt; NativeFile</code><ul><li>create a new drop zone type with filter applied</li></ul></li></ul></li></ul><h3 id="dnddraghandlerwithdata-t" tabindex="-1"><a class="header-anchor" href="#dnddraghandlerwithdata-t" aria-hidden="true">#</a> DndDragHandlerWithData&lt;T&gt;</h3><p>type: <code>(ev: DragEvent | PointerEvent, data: T) =&gt; void</code></p><h3 id="startdirection" tabindex="-1"><a class="header-anchor" href="#startdirection" aria-hidden="true">#</a> StartDirection</h3><p>type: <code>&#39;all&#39; | &#39;x&#39; | &#39;y&#39;</code></p>`,42),s=[l];function o(r,p){return a(),n("div",null,s)}const c=e(i,[["render",o],["__file","index.html.vue"]]);export{c as default};
