import{_ as r,M as e,p as d,q as u,N as a,V as t,Q as n,t as s,a1 as k}from"./framework-9002dd78.js";const v={},m=n("h1",{id:"first-drag-and-drop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#first-drag-and-drop","aria-hidden":"true"},"#"),s(" First drag and drop")],-1),g=n("h2",{id:"create-the-event-type",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-the-event-type","aria-hidden":"true"},"#"),s(" Create the event type")],-1),h=n("p",null,"Before you set up the drag item and drop zone. You need an event type to pair them",-1),b=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createType "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@mmis1000/vue-dnd'"),s(`
`),n("span",{class:"token comment"},"// the DataType is what you used to identify the item for drag"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"DataType"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"string"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" BallType "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"createType"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("DataType"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createType "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@mmis1000/vue-dnd'"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"const"),s(" BallType "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createType"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=k(`<h2 id="setup-the-drag-target" tabindex="-1"><a class="header-anchor" href="#setup-the-drag-target" aria-hidden="true">#</a> Setup the drag target</h2><p>Assume you already have an object on screen for drag</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ball<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token comment">/* ... */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can decorate it with the hook</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &lt;template&gt;
</span><span class="token prefix unchanged"> </span><span class="token line">     &lt;div
</span><span class="token prefix unchanged"> </span><span class="token line">         class=&quot;ball&quot;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         v-bind=&quot;propsItem&quot;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &gt;...&lt;/div&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;/template&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;script setup lang=&quot;ts&quot;&gt;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { computed } from &quot;vue&quot;;
</span><span class="token prefix inserted">+</span><span class="token line"> import { useDraggable } from &#39;@mmis1000/vue-dnd&#39;;
</span><span class="token prefix inserted">+</span><span class="token line"> import { BallType } from &quot;./type&quot;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const props = defineProps({
</span><span class="token prefix unchanged"> </span><span class="token line">     index: {
</span><span class="token prefix unchanged"> </span><span class="token line">         type: String,
</span><span class="token prefix unchanged"> </span><span class="token line">         required: true,
</span><span class="token prefix unchanged"> </span><span class="token line">     }
</span><span class="token prefix unchanged"> </span><span class="token line"> });
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const { propsItem } = useDraggable(
</span><span class="token prefix inserted">+</span><span class="token line">     BallType,
</span><span class="token prefix inserted">+</span><span class="token line">     computed(() =&gt; props.index)
</span><span class="token prefix inserted">+</span><span class="token line"> );
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &lt;/script&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;style&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> /* ... */
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;/style&gt;
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The item should be draggable now</p><h2 id="setup-the-drop-zone" tabindex="-1"><a class="header-anchor" href="#setup-the-drop-zone" aria-hidden="true">#</a> Setup the drop zone</h2><p>Assume you already have a container on screen for drop item</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token comment">/* ... */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can decorate it with the hook</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &lt;template&gt;
</span><span class="token prefix unchanged"> </span><span class="token line">     &lt;div
</span><span class="token prefix unchanged"> </span><span class="token line">         class=&quot;box&quot;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         v-bind=&quot;propsItem&quot;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &gt;...&lt;/div&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;/template&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;script setup lang=&quot;ts&quot;&gt;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { useDroppable } from &#39;@mmis1000/vue-dnd&#39;;
</span><span class="token prefix inserted">+</span><span class="token line"> import { BallType } from &quot;./type&quot;;
</span><span class="token prefix inserted">+</span><span class="token line"> const { propsItem } = useDroppable(
</span><span class="token prefix inserted">+</span><span class="token line">     BallType,
</span><span class="token prefix inserted">+</span><span class="token line">     {
</span><span class="token prefix inserted">+</span><span class="token line">         onDrop: (ev, data) =&gt; {
</span><span class="token prefix inserted">+</span><span class="token line">             console.log(\`\${data} dropped\`)
</span><span class="token prefix inserted">+</span><span class="token line">         }
</span><span class="token prefix inserted">+</span><span class="token line">     }
</span><span class="token prefix inserted">+</span><span class="token line"> );
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &lt;/script&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;style&gt;
</span><span class="token prefix unchanged"> </span><span class="token line"> /* ... */
</span><span class="token prefix unchanged"> </span><span class="token line"> &lt;/style&gt;
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> Result</h2><p>Try to drag the item into drop zone.<br> It should log the text you write in the drag item on the screen now.</p>`,13);function y(_,q){const p=e("CodeGroupItem"),l=e("CodeGroup"),i=e("example-first-dnd-app"),o=e("example-wrapper");return d(),u("div",null,[m,g,h,a(l,null,{default:t(()=>[a(p,{title:"Typescript"},{default:t(()=>[b]),_:1}),a(p,{title:"Javascript"},{default:t(()=>[f]),_:1})]),_:1}),x,a(o,{title:"example",source:"https://github.com/mmis1000/vue-dnd/blob/master/docs/src/.vuepress/components/ExampleFirstDnd/App.vue",options:[{name:"provider",type:"radio",value:"html",options:[{text:"HTML",value:"html"},{text:"Pointer",value:"pointer"}]}]},{default:t(({provider:c})=>[a(i,{provider:c},null,8,["provider"])]),_:1})])}const T=r(v,[["render",y],["__file","first-drag-and-drop.html.vue"]]);export{T as default};
